syntax = "proto3";

option go_package="./;proto";
option java_package = "org.liquibase.grpc.proto";
option java_multiple_files = true;
option java_outer_classname = "globalOptionsProto";

package liquibase;

/* Liquibase Global Options */
message GlobalOptions {
  optional bool add_empty_mdc_values = 1; // If true, a subset of the MdcKeys, as defined by product, will be set to empty strings upon system startup.
  optional bool always_drop_instead_of_replace = 2; // If true, drop and recreate a view instead of replacing it.
  optional bool always_override_stored_logic_schema = 3; // When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?
  optional bool auto_reorg = 4; // Should Liquibase automatically include REORG TABLE commands when needed?
  optional string changelog_lock_poll_rate = 5; // Number of seconds wait between checks to the changelog lock when it is locked
  optional string changelog_lock_wait_time_in_minutes = 6; // Number of minutes to wait for the changelog lock to be available before giving up
  optional string changelog_parse_mode = 7; // Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.
  optional string classpath = 8; // Additional classpath entries to use
  optional bool convert_data_types = 9; // Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.
  optional string custom_log_data_file = 10; // [PRO]Relative or fully qualified path to a yaml file containing key:value data to inject or exclude data from JSON structured logs. Learn more at https://docs.liquibase.com/structured-logging
  optional string custom_log_data_frequency = 11; // [PRO]The frequency that the custom log data will be entered into the logs. Available options are: ONCE,REPEATED
  optional string database_changelog_lock_table_name = 12; // Name of table to use for tracking concurrent Liquibase usage
  optional string database_changelog_table_name = 13; // Name of table to use for tracking change history
  optional string database_class = 14; // Class to use for Database implementation
  optional int32 ddl_lock_timeout = 15; // The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.
  optional string defaults_file = 16; // File with default Liquibase properties
  optional bool diff_column_order = 17; // Should Liquibase compare column order in diff operation?
  optional string driver = 18; // Database driver class
  optional string driver_properties_file = 19; // Driver-specific properties
  optional string duplicate_file_mode = 20; // How to handle multiple files being found in the search path that have duplicate paths. Options are WARN (log warning and choose one at random) or ERROR (fail current operation)
  optional bool error_on_circular_include_all = 21; // Throw an error if Liquibase detects that an includeAll will cause a circular reference (and thus a changelog parse error).
  optional string file_encoding = 22; // Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.
  optional bool filter_log_messages = 23; // DEPRECATED: No longer used
  optional bool flow_verbose_to_string = 24; // If true, display a more verbose output for the FlowFile toString representation
  optional bool generate_changeset_created_values = 25; // Should Liquibase include a 'created' attribute in diff/generateChangelog changesets with the current datetime
  optional bool generated_changeset_ids_contains_description = 26; // Should Liquibase include the change description in the id when generating changesets?
  optional bool headless = 27; // Force liquibase to think it has no access to a keyboard
  optional bool include_catalog_in_specification = 28; // Should Liquibase include the catalog name when determining equality?
  optional bool include_relations_for_computed_columns = 29; // If true, the parent relationship for computed columns is preserved in snapshot-dependent commands: snapshot and diff
  optional bool include_system_classpath = 30; // Include the system classpath when resolving classes at runtime
  optional string license_key = 31; // Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.
  optional string liquibase_catalog_name = 32; // Catalog to use for Liquibase objects
  optional string liquibase_schema_name = 33; // Schema to use for Liquibase objects
  optional string liquibase_tablespace_name = 34; // Tablespace to use for Liquibase objects
  optional string log_channels = 35; // Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use 'all'. Example: liquibase,org.mariadb.jdbc
  optional string log_file = 36;
  optional string log_format = 37; // Sets the format of log output to console or log files. Open Source users default to unstructured "TEXT" logs to the console or output log files. Pro users have the option to set value as "JSON" or "JSON_PRETTY" to enable json-structured log files to the console or output log files.
  optional string log_level = 38; // Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE
  optional bool mirror_console_messages_to_log = 39; // When set to true, the console messages are mirrored to the logs as [liquibase.ui] to provide a more complete picture of liquibase operations to log analysis tools. Set to false to change this behavior.
  optional string missing_property_mode = 40; // How to handle changelog property expressions where a value is not set. For example, a string '${address}' when no 'address' property was defined. Values can be: 'preserve' which leaves the string as-is, 'empty' which replaces it with an empty string, or 'error' which stops processing with an error.
  optional string monitor_performance = 41; // Enable performance tracking. Set to 'false' to disable. If set to 'true', data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.
  optional string native_executor = 42; // Custom executor that can specified
  optional string on_missing_include_changelog = 43; // If set to WARN, then liquibase will not throw exception on missing changelog file, instead will show a warning message.
  optional string on_missing_sql_file = 44; // If set to WARN, then Liquibase will not throw exception on missing sqlFile inside a sqlFile change type, instead will show a warning message
  optional string output_file = 45;
  optional string output_file_encoding = 46; // Encoding to use when writing files
  optional string output_line_separator = 47; // Line separator for output
  optional bool preserve_schema_case = 48; // Should liquibase treat schema and catalog names as case sensitive?
  optional bool pro_force_on_partial_changes = 49; // If true, rollback execution will be forced when having partial changes that needs to be rolled back. Defaults to false.
  optional string pro_global_end_delimiter = 50; // [PRO]The default end delimiter to use for all change sets
  optional bool pro_global_end_delimiter_prioritized = 51; // [PRO]If true, the global end delimiter overrides all other settings
  optional string pro_license_key = 52; // DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.
  optional bool pro_mark_unused_not_drop = 53; // If a column would be dropped in a diffChangeLog, call markUnused instead if set to true
  optional bool pro_sql_inline = 54; // If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file
  optional bool pro_synonyms_drop_public = 55; // If false, do not drop public synonyms in diffChangeLog/dropAll
  optional bool prompt_for_non_local_database = 56; // Should Liquibase prompt if a non-local database is being accessed
  optional string property_provider_class = 57; // Implementation of Properties class to provide additional driver properties
  optional bool reports_enabled = 58; // Enable or disable reporting.
  optional string reports_format = 59; // The format of the report. Currently, can only be set to "html".
  optional string reports_name = 60; // The name of the reports.
  optional string reports_path = 61; // The path to the directory to generate the reports.
  optional string search_path = 62; // Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.
  optional bool secure_parsing = 63; // If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.
  optional bool should_run = 64; // Should Liquibase commands execute
  optional bool should_snapshot_data = 65; // Should Liquibase snapshot data by default?
  optional bool show_banner = 66; // If true, show a Liquibase banner on startup.
  optional bool show_hidden_args = 67; // If true, all command arguments marked as hidden will be shown in the help output, ignoring the hidden flag. NOTE, due to the order of value provider loading at such an early point in Liquibase startup, you MUST set this as a environment variable. Command line parameters will not be recognized.
  optional string sql_log_level = 68; // Level to log SQL statements to
  optional bool sql_show_sql_warnings = 69; // Show SQLWarning messages
  optional bool strict = 70; // Be stricter on allowed Liquibase configuration and setup?
  optional bool support_property_escaping = 71; // Support escaping changelog parameters using a colon. Example: ${:user.name}
  optional string ui_service = 72; // Changes the default UI Service Logger used by Liquibase. Options are CONSOLE or LOGGER.
  optional bool use_procedure_schema = 73; // If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.
  optional bool validate_xml_changelog_files = 74; // Will perform xsd validation of XML changelog files. When many XML changelog files are included this validation may impact Liquibase performance. Defaults to true.
}

